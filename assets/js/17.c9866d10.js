(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{68:function(e,n,t){"use strict";t.r(n);var r=t(0),a=Object(r.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"贡献指南"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贡献指南","aria-hidden":"true"}},[e._v("#")]),e._v(" 贡献指南")]),e._v(" "),t("h2",{attrs:{id:"项目结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目结构","aria-hidden":"true"}},[e._v("#")]),e._v(" 项目结构")]),e._v(" "),t("p",[e._v("整个项目使用 Go 实现，所以遵循了一般 Go 项目的规则，下面是整个项目结构的简单说明：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(".\n├─ aggregation    : 数据聚合，函数及表达式计算\n├─ bin            : 编译生成的文件，二进制包名称为 `lind`\n├─ broker         : Broker 内部实现及整个 Broker 的运行时依赖\n├─ ci             : 一些 CI 工具及protobuf脚本\n├─ cmd            : 整个系统的入口，包括 Broker, Stroage 及 Standalone\n├─ config         : 各组件启动时需要的配置项\n├─ constants      : 一些通用的常量定义\n├─ coordinator    : 分布式的协调者，包括 Metadata, State 及 Task 的管理，包含了 Broker, Storage 及 Master 等\n├─ kv             : 底层的通用 KV 存储\n├─ mock           : 项目所用到的一些 Mock 工具实现\n├─ models         : 整个项目的 Model 定义\n├─ parallel       : 分布式查询计算的 Job 及 Task 的管理\n├─ pkg            : 整个项目通用函数的实现\n├─ query          : 查询执行逻辑，包括 Broker 和 Storage 的查询\n├─ replication    : WAL 复制逻辑\n├─ rpc            : 内部通信的 RPC \n├─ service        : 内部通用服务的实现\n├─ sql            : SQL 解析\n├─ standalone     : 单机模式运行时依赖\n├─ storage        : Storage 内部实现及整个 Storage 的运行时依赖 \n├─ tsdb           : 整个 Time Series 存储引擎 \n│  ├─ indexdb     : 索引数据库\n│  ├─ indextbl    : 索引数据库写 KV 存储，与索引文件查询功能\n│  ├─ memdb       : Time Series 内存数据库\n│  ├─ metrictbl   : 内存数据库写 KV 存储，与数据文件查询功能\n│  └─ series      : 基于 Bitmap 的多版本和series接口\n├─ vendor         : Go vender\n└─ web            : 前端项目\n")])])])])},[],!1,null,null,null);n.default=a.exports}}]);